using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Dvarim
{
    class Program
    {
        static void Main(string[] args)
        {
            Cube cube1 = new Cube(Cube.Color.Black, Cube.Color.Yellow, Cube.Color.Green, Cube.Color.Green, Cube.Color.Red, Cube.Color.Black);
            Cube cube2 = new Cube(Cube.Color.Red, Cube.Color.Green, Cube.Color.Yellow, Cube.Color.Black, Cube.Color.Yellow, Cube.Color.Red);
            Cube cube3 = new Cube(Cube.Color.Green, Cube.Color.Yellow, Cube.Color.Black, Cube.Color.Red, Cube.Color.Red, Cube.Color.Green);
            Cube cube4 = new Cube(Cube.Color.Black, Cube.Color.Red, Cube.Color.Yellow, Cube.Color.Green, Cube.Color.Yellow, Cube.Color.Yellow);

            int solutionCounter = 1;

            for (int i = 0; i < 24; i++)
            {
                cube1.ShiftCube();

                for (int j = 0; j < 24; j++)
                {
                    cube2.ShiftCube();

                    for (int k = 0; k < 24; k++)
                    {
                        cube3.ShiftCube();

                        for (int l = 0; l < 24; l++)
                        {
                            cube4.ShiftCube();

                            if (ArangementIsValid(cube1, cube2, cube3, cube4))
                            {
                                Console.WriteLine($"Solution {solutionCounter}:\n");
                                Console.WriteLine("Cube 1:\n" + cube1);
                                Console.WriteLine("Cube 2:\n" + cube2);
                                Console.WriteLine("Cube 3:\n" + cube3);
                                Console.WriteLine("Cube 4:\n" + cube4);
                                Console.WriteLine();

                                solutionCounter++;
                            }
                        }
                    }
                }
            }
        }
        static bool ArangementIsValid(Cube cube1, Cube cube2, Cube cube3, Cube cube4)
        {
            bool topRow = RowIsValid(cube1.GetTopFace(), cube2.GetTopFace(), cube3.GetTopFace(), cube4.GetTopFace());
            bool bottomRow = RowIsValid(cube1.GetBottomFace(), cube2.GetBottomFace(), cube3.GetBottomFace(), cube4.GetBottomFace());
            bool frontRow = RowIsValid(cube1.GetFrontFace(), cube2.GetFrontFace(), cube3.GetFrontFace(), cube4.GetFrontFace());
            bool backRow = RowIsValid(cube1.GetBackFace(), cube2.GetBackFace(), cube3.GetBackFace(), cube4.GetBackFace());

            return topRow && bottomRow && frontRow && backRow;
        }
        static bool RowIsValid(Cube.Color face1, Cube.Color face2, Cube.Color face3, Cube.Color face4)
        {
            Cube.Color[] line = { face1, face2, face3, face4 };

            for (int i = 0, j = 1; i < 3; j++)
            {
                if (line[i] == line[j])
                    return false;

                if (j == 3)
                {
                    i++;
                    j = i;
                }
            }

            return true;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Dvarim
{
    class Cube
    {
        public enum Color { Red, Black, Green, Yellow }

        Color faceTop, faceBottom, faceRight, faceLeft, faceFront, faceBack;
        int position;

        public Cube(Color faceTop, Color faceBottom, Color faceRight, Color faceLeft, Color faceFront, Color faceBack)
        {
            this.faceTop = faceTop;
            this.faceBottom = faceBottom;
            this.faceRight = faceRight;
            this.faceLeft = faceLeft;
            this.faceFront = faceFront;
            this.faceBack = faceBack;
            position = 1;
        }

        public override string ToString()
        {
            string str = "";

            str += ($"Up = {faceTop}\n");
            str += ($"Down = {faceBottom}\n");
            str += ($"Right = {faceRight}\n");
            str += ($"Left = {faceLeft}\n");
            str += ($"Front = {faceFront}\n");
            str += ($"Back = {faceBack}\n");

            return str;
        }

        public Color GetTopFace() => faceTop;
        public Color GetBottomFace() => faceBottom;
        public Color GetRightFace() => faceRight;
        public Color GetLeftFace() => faceLeft;
        public Color GetFrontFace() => faceFront;
        public Color GetBackFace() => faceBack;

        public void ShiftCube()
        {
            if (position <= 4 || position > 8 && position <= 12)
            {
                YawRight();

                if (position == 4 || position == 12)
                    PitchUp();
            }
            else if (position <= 8 || position > 12 && position <= 16)
            {
                RollRight();

                if (position == 8 || position == 16)
                {
                    PitchUp();

                    if (position == 16)
                        RollRight();
                }
            }
            else if (position <= 24)
            {
                PitchUp();

                if (position == 20)
                {
                    RollLeft();
                    RollLeft();
                }
                if (position == 24)
                {
                    RollRight();
                    position = -1;
                }
            }

            position++;
        }

        public void PitchUp()
        {
            Color temp = faceTop;

            faceTop = faceFront;
            faceFront = faceBottom;
            faceBottom = faceBack;
            faceBack = temp;
        }
        public void RollRight()
        {
            Color temp = faceTop;

            faceTop = faceLeft;
            faceLeft = faceBottom;
            faceBottom = faceRight;
            faceRight = temp;
        }
        public void RollLeft()
        {
            Color temp = faceTop;

            faceTop = faceRight;
            faceRight = faceBottom;
            faceBottom = faceLeft;
            faceLeft = temp;
        }
        public void YawRight()
        {
            Color temp = faceFront;

            faceFront = faceLeft;
            faceLeft = faceBack;
            faceBack = faceRight;
            faceRight = temp;
        }
    }
}
